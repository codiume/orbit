---
export interface Props {
  /**
   * Google Tag Manager container ID (required)
   * @example 'GTM-XXXXXXX'
   */
  gtmId: string;

  /**
   * Object that contains all of the information
   * that you want to pass to Google Tag Manager.
   */
  dataLayer?: Record<string, unknown>;

  /**
   * Custom name for dataLayer object.
   */
  dataLayerName?: string;

  /**
   * Whether to include the noscript iframe
   * @default true
   */
  includeNoScript?: boolean;

  /**
   * Whether to enable Google Tag Manager in development mode
   * @default false
   */
  enableInDevMode?: boolean;
}

const {
  gtmId,
  dataLayer = {},
  dataLayerName = "dataLayer",
  includeNoScript = true,
  enableInDevMode = false,
} = Astro.props;

// Skip in development mode unless explicitly enabled
const isDevelopment = import.meta.env.DEV;
const shouldRender = !isDevelopment || enableInDevMode;
---

{shouldRender && (
  <script define:vars={{ gtmId, dataLayerName, dataLayer }}>
    var w = window,
      d = document;

    // Create and append GTM script
    w[dataLayerName] = w[dataLayerName] || [];
    w[dataLayerName].push(dataLayer);
    w[dataLayerName].push({
      "gtm.start": new Date().getTime(),
      event: "gtm.js",
    });
    var s = d.createElement("script");
    var dl = dataLayerName != "dataLayer" ? "&l=" + dataLayerName : "";
    s.async = true;
    s.src = "https://www.googletagmanager.com/gtm.js?id=" + gtmId + dl;
    d.head.prepend(s);
  </script>
)}

{
  shouldRender && includeNoScript && (
    <noscript>
      <iframe
        src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}
        height="0"
        width="0"
        style="display:none;visibility:hidden"
      />
    </noscript>
  )
}
